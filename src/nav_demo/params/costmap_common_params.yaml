#机器人几何参数，如果机器人是圆形，设置 robot_radius,如果是其他形状设置 footprint
robot_radius: 0.1 #圆形

#地图类型
map_type: costmap # 另一种地图类型为为voxel(体素地图)。这两者之间的区别是前者是世界的2D表示，后者为世界的3D表示。

obstacle_layer:
  enabled: true
   # 用于障碍物探测，比如: 值为 3.0，意味着检测到距离小于 3 米的障碍物时，就会引入代价地图
  obstacle_range: 3.0
   # 用于清除障碍物，比如：值为 3.5，意味着清除代价地图中 3.5 米以外的障碍物
  raytrace_range: 3.5
  # 如果设置为false，那么地图上代价值就只分为致命碰撞和自由区域两种，如果设置为true，那么就分为致命碰撞，自由区域和未知区域三种。
  # 意思是说假如该参数设置为false的话，就意味着地图上的未知区域也会被认为是可以自由移动的区域，这样在进行全局路径规划时，
  # 可以把一些未探索的未知区域也来参与到路径规划，如果你需要这样的话就将该参数设置为false。
  # 不过一般情况未探索的区域不应该当作可以自由移动的区域，因此一般将该参数设置为true
  track_unknown_space: false  
  # 只能设置为0或1，用来更新地图上的代价值，一般设置为1
  combination_method: 1
  #导航包所需要的传感器
  observation_sources: scan 
  #对传感器的坐标系和数据进行配置。这个也会用于代价地图添加和清除障碍物。例如，你可以用激光雷达传感器用于在代价地图添加障碍物，再添加kinect用于导航和清除障碍物。
  scan: {sensor_frame: laser, data_type: LaserScan, topic: scan, marking: true, clearing: true}

inflation_layer:
  enabled:              true
  cost_scaling_factor:  3.0  # exponential rate at which the obstacle cost drops off (default: 10)

static_layer:
  enabled:              true





